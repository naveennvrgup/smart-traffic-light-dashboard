{"version":3,"sources":["axios.js","components/SignalMain.js","components/Signal.js","components/SignalList.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","SignalMain","lights","signal","timerBarStyle","ratioTimeModulo","rowSpan","length","width","id","location","lat","lng","className","Date","timer","toLocaleTimeString","year","month","day","hour","minute","second","style","controlList","map","control","i","key","red","toString","green","Signal","resetInterval","currTime","syncTime","useState","setRatioTimeModulo","useEffect","intervalObj","setInterval","timeAfterReset","Math","ceil","valueOf","clearInterval","timeBarWidth","timeBarColor","background","light","direction","operationMode","signalState","heartbeat","SignalList","history","signals","setSignals","setResetInterval","loadingResetOverRide","setLoadingResetOverRide","get","then","response","data","catch","err","console","log","signalsDiv","cursor","onClick","push","finally","Map","ReactMapboxGl","accessToken","MapScreen","center","zoom","containerStyle","height","type","layout","coordinates","App","component","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3589a8e4.chunk.js","sourcesContent":["import axios from 'axios';\n\nlet baseURL = 'http://34.87.155.79:8000/';\nconst instance = axios.create({\n    baseURL\n});\n\ninstance.defaults.headers.common['Authorization'] = 'Token dbef64a307efc2df5a8cab4827a8a65833f1b5e6';\n\nexport default instance;","import React, {Fragment} from \"react\";\n\nconst SignalMain = ({lights, signal, timerBarStyle, ratioTimeModulo}) => {\n    return <Fragment>\n        <th rowSpan={lights.length} width='10px'>{signal.id}</th>\n        <td rowSpan={lights.length} width='50px'>{signal.location}</td>\n        <td rowSpan={lights.length}>{signal.lat}</td>\n        <td rowSpan={lights.length}>{signal.lng}</td>\n        <td rowSpan={lights.length}>\n            <table className='table table-bordered mb-0'>\n                <tbody>\n                <tr>\n                    <td className='table-active'>Sync Time</td>\n                    <td>{new Date(signal.timer).toLocaleTimeString('en-IN', {\n                        year: 'numeric',\n                        month: 'numeric',\n                        day: 'numeric',\n                        hour: 'numeric',\n                        minute: 'numeric',\n                        second: 'numeric'\n                    })}</td>\n                </tr>\n                <tr>\n                    <td className='table-active'>Since Reset</td>\n                    <td className='timer'>\n                        <span className=\"timeBar\" style={timerBarStyle}></span>\n                        <span className=\"time\">{ratioTimeModulo}</span>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </td>\n        <td rowSpan={signal.lights.length}>\n            <table className='table table-bordered mb-0'>\n                <thead className='table-active'>\n                <tr>\n                    <td>Red</td>\n                    <td>Green</td>\n                </tr>\n                </thead>\n                <tbody>\n                {signal.controlList.map((control, i) => <tr key={i}>\n                    <td>{control.red.toString()}</td>\n                    <td>{control.green.toString()}</td>\n                </tr>)}\n                </tbody>\n            </table>\n        </td>\n        <td rowSpan={lights.length} width='10px'>{lights.length}</td>\n    </Fragment>\n}\n\nexport default SignalMain;","import React, {useState, useEffect} from 'react';\nimport SignalMain from \"./SignalMain\";\nimport './signal.css';\n\n\nconst Signal = ({signal, resetInterval}) => {\n    const {lights} = signal;\n    const currTime = new Date()\n    const syncTime = new Date(signal.timer)\n\n    const [ratioTimeModulo, setRatioTimeModulo] = useState(0)\n\n    // every second grow the timeAfterReset bar\n    useEffect(() => {\n        const intervalObj = setInterval(() => {\n            const timeAfterReset = Math.ceil(currTime.valueOf() / 1000 - syncTime.valueOf() / 1000) % resetInterval + 1\n            setRatioTimeModulo(timeAfterReset)\n        }, 1000);\n\n        return () => {\n            clearInterval(intervalObj);\n        }\n    })\n\n    // compute styles of the bar\n    const timeBarWidth = (ratioTimeModulo / resetInterval) * 90;\n    let timeBarColor = 'orange';\n    if (timeBarWidth < 40) timeBarColor = 'lightgreen';\n    else if (timeBarWidth < 70) timeBarColor = 'yellow';\n\n\n    const timerBarStyle = {\n        width: timeBarWidth + '%',\n        background: timeBarColor,\n    }\n\n    // taking advantage of rowspan only put the signal info\n    // on the first row\n    return lights.map((light, i) => <tr key={light.id}>\n        {i === 0 ? <SignalMain {...{lights, signal, ratioTimeModulo, timerBarStyle}} /> : null}\n        <th width='10px'>{light.id}</th>\n        <td>{light.direction}</td>\n        <td className={light.operationMode === 'OverRide' ? 'bgblue' : null}>{light.operationMode}</td>\n        <td className={light.signalState === 'Red' ? 'bgred' : 'bggreen'}>\n            {light.signalState}\n        </td>\n        <td>{new Date(light.heartbeat).toLocaleTimeString('en-IN', {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric'\n        })}</td>\n    </tr>)\n\n}\n\nexport default Signal;","import React, {Fragment, useEffect, useState} from 'react';\nimport axios from '../axios';\nimport Signal from \"./Signal\";\n\nconst SignalList = ({history}) => {\n    const [signals, setSignals] = useState([]);\n    const [resetInterval, setResetInterval] = useState(5);\n    const [loadingResetOverRide, setLoadingResetOverRide] = useState(false);\n\n    const fetchReport = () => {\n        axios.get('/maps/stateReporting/')\n            .then(response => {\n                setSignals(response.data.signals);\n                setResetInterval(response.data.resetInterval);\n            }).catch(err => {\n            console.log(err);\n        })\n    }\n\n    const revokeOverRide = () => {\n        setLoadingResetOverRide(true);\n        axios.get('/maps/revokeOverRide/')\n            .then(response => {\n                console.log(response);\n            }).catch(err => {\n            console.log(err);\n        }).finally(() => {\n            setLoadingResetOverRide(false);\n        })\n    }\n\n    // fetch the reporting data + resetInterval every second\n    useEffect(() => {\n        // fetchReport();\n        const intervalObj = setInterval(() => {\n            fetchReport();\n        }, 1000)\n\n        return () => {\n            clearInterval(intervalObj)\n        }\n    });\n\n    const signalsDiv = signals.map((signal, i) => <Signal key={i} {...{signal, resetInterval}} />)\n\n    return <Fragment>\n        <table className='table table-bordered'>\n            <thead className='table-dark'>\n            <tr>\n                <td>Signal Id</td>\n                <td style={{cursor: 'pointer'}} onClick={() => history.push('/map')}>\n                    <span>Location </span>\n                    <span className='text-danger'>*</span>\n                </td>\n                <td>Lat</td>\n                <td>Lng</td>\n                <td>Timer</td>\n                <td>Control List</td>\n                <td>No. Lights</td>\n                <td>Light Id</td>\n                <td>Bearing</td>\n                <td style={{cursor: 'pointer'}} onClick={revokeOverRide}>\n                    <span>Mode </span>\n                    {loadingResetOverRide ?\n                        <span className='spinner-border text-primary spinner-border-sm'></span> :\n                        <span className=\"text-danger\">*</span>}\n                </td>\n                <td>Color</td>\n                <td>Heartbeat</td>\n            </tr>\n            </thead>\n            <tbody>\n            {signalsDiv}\n            </tbody>\n        </table>\n    </Fragment>\n}\n\nexport default SignalList;","import React from \"react\";\nimport ReactMapboxGl, {Layer, Feature, Marker} from 'react-mapbox-gl';\n\n\nconst Map = ReactMapboxGl({\n    accessToken:\n        'pk.eyJ1IjoibmF2ZWVubnZyZ3VwIiwiYSI6ImNrZ2kxYW9oeTAyODczMm40dWs4MzkwM2cifQ.wlwkYJu5zSryrA5aSIig_A'\n});\n\nconst MapScreen = () => {\n    return <Map\n        center={[77.341309, 11.107370]}\n        zoom={[11]}\n        style=\"mapbox://styles/mapbox/streets-v9\"\n        containerStyle={{\n            height: '100vh',\n            width: '100vw'\n        }}\n    >\n        <Layer type=\"symbol\" id=\"marker\" layout={{'icon-image': 'marker-15'}}>\n            <Feature coordinates={[77.2937723, 11.1085742]}/>\n        </Layer>\n    </Map>;\n}\n\nexport default MapScreen;","import React from 'react';\nimport SignalList from \"./components/SignalList\";\nimport MapScreen from \"./components/Map\"\nimport {Switch, Route} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route component={MapScreen} path={'/map'}/>\n                <Route component={SignalList} path={''}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}